PART3. 이미지 레지스트리
  이미지 레스트리는 도커 이미지를 저장하기 위한 저장소입니다.
  이미지 레지스트리를 통해 개인이나 팀이 이미지를 다른 사람과 공유하거나 필요한
  이미지를 다운 받을 수 있습니다. 

  Docker hub 가입후 이미지를 다운로드 할 예정 

  프라이빗 레지스트리
    Amazon ECR
    Azure
  퍼블릭 레지스트리
    HARBOR
    docker 
  로컬 스토리지


이미지명 규칙
  레지스트리주소(docker.io)/프로젝트명/이미지명:이미지태그 
  docker run -d -p 80:80 --name hellonginx nginx

  레지스트리주소 # 홈페이지 주소
  프로젝트명 # 도커 허브 같은 경우는 가입한 사용자의 계정명이 프로젝트명 
  이미지명 # 다운로드 받을 이미지의 이름
  이미지명태그 # 이미지 태그는 이미지의 버전

  devwiki.com/myProject/myNginx:2.1.0-alpine

  docker.io/devwikirepo/tencounter:latest

  docker.io/library/nginx:latest

이미지 다운후 업로드 
 
  docker pull 이미지명
  : 로컬 스토리지로 이미지 다운로드
  docker tag 기존이미지명 추가할이미지명
  : 로컬스토리지의 이미지명 추가
  docker push 이미지명
  : 이미지 레지스트리에 이미지 업로드

  1.로컬 스토리지로 이미지 다운로드 (docker pull)
  2.이미지명 추가 (docker tag)
  3.동일한 이미지의 이름을 추가하며 내 프로젝트로 이미지 푸시 (docker push)

  devwikirepo/nginx:1.0.0 -> myaccount/mynginx:0.1

  docker pull devwikirepo/simple-web:1.0 # docker pull
  docker tag devwikirepo/simple-web:1.0 레지스트리계정명/my-simple-web:0.1 # 실습용 이미지의 이름 변경
  docker push wldygus/my-simple-web:0.1 # docker push  업로드할 인증정보가 필요함 

도커 허브에 로그인 하기 
  docker login
  : 이미지 레지스트리 인증 정보 생성
  docker logout
  : 이미지 레지스트리 인증 정보 삭제
  docker image rm 이미지명 
  : 로컬 스토리지의 이미지 삭제 

  Docker login

  docker image rm wldwygus/my-simple-web:0.1
  
  docker run -d -p 80:80 --name my-simple-web wldygus/my-simple-web:0.1
  docker rm -f my-simple-web # 실습 컨테이너 삭제 

이미지빌드
  이미지가 어떻게 저장되고 어떻게 하면 효율적인 레이어 관리 
  멀티 스테이징 방식

 이미지 레이어 
 : 여러 개의 층을 레이어라고 한다.


    설계도 A [ 조경 , 전기-01 , 토목 , 구조 ]
    설걔도 B [ 조경 , 전기-02 , 토목 , 구조 ] 
    
  Nginx 이미지 설계
    os -> Nginx설치 -> nginx설정 -> Index.html 파일 수정 

    이미지 레이어와 컨테이너 레이어
      이미지의 레이어는 이전 레이어의 변경 사항이 저장
      컨테이너 실행 시 읽기, 쓰기 가능한 새로운 레이어 추가 
      
      docker run --name Container1 ImageA 
      docker run --name Container2 ImageA 
      docker run --name Container3 ImageB 
      
  docker image history 이미지명
  : 이미지의 레이어 이력 조회

  docker pull devwikirepo/hello-nginx
  docker pull devwikirepo/config-nginx
  docker pull devwikirepo/pre-config-nginx

  docker image history devwikirepo/hello-nginx

  nginx:1.24.0 
    bc5eac5eafc5   6 weeks ago   CMD ["nginx" "-g" "daemon off;"]                 0B        buildkit.docke
  hello-nginx 
    <missing>      10 months ago   COPY index.html /usr/share/nginx/html/index.…   24.6kB    buildkit.dock
  config-nginx
    <missing>      10 months ago   COPY nginx.conf /etc/nginx/nginx.conf # buil…   16.4kB    buildkit.dockerfile.v0
    <missing>      10 months ago   COPY index.html /usr/share/nginx/html/index.…   24.6kB    buildkit.docke              0B        buildkit.doc
 pre-config-nginx
    <missing>      10 months ago   COPY index.html /usr/share/nginx/html/index.…   24.6kB    buildkit.dockerfile.v0
    <missing>      10 months ago   COPY nginx.conf /etc/nginx/nginx.conf # buil…   16.4kB    buildkit.dock

  docker image inspect devwikirepo/hello-nginx

  nginx:1.24.0 
    "RootFS": {
                "Type": "layers",
                "Layers": [
                    "sha256:c3548211b8264f8bfa47a6727043a64f1791b82ac965a284a7ea187e971a95e2",
                    "sha256:7dca41ff148690a71f3a18230b037c224699bddca66451edfc3e0875c38266a5",
                    "sha256:ffe4285e29068b1a6112d99b633535058b91344bb1eac41cbec3c319c908cc43",
                    "sha256:19b722697f76432e2991f3ddbfe83ff062c58cbc81ae86a209cc1a907281ed33",
                    "sha256:a1fe8b721bb198a7416c45774b913499e3d32da7e49c36a173ab9eab1f16f651",
                    "sha256:a0c145a29c8d0bd6496ca844601ea021aaeef71ab28a060cc9b4e3f0031d2eb6",
                    "sha256:61ef4e878aac3937fc88785022b0a2b9b7791455b3a34b72eb5a77fd1bdbc7fd"
                ]
            },
  hello-nginx
    "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:e6cd39d4cea4051114c9bf1c61995efdb7b33a54c7b46b33b221f8371ae8c2b7",
                "sha256:7d1066a7c364bec8b8bb9a2621255009f66d8ef0ce0a437245ee7bab4b78e261",
                "sha256:79375ec14dc0353879d775e456501963e612315a637d02f88b59d95de0db5c85",
                "sha256:d67815551841241d1c88df385c85136439add7b880fb458c5a81d193b453bc01",
                "sha256:8e3d312836d7ccb6d8fddf82a085e00f28491d506e9380215b558087ac30c68c",
                "sha256:70d1d8c1333ed932da4c736ecad931d87e9f8410327711161cfc2e52577337ec",
                "sha256:5fa714fcbb2b89bddb223b4040ba515dc7d35753d2915a184d7c95c039a12dc0"
            ]
        },

  config-nginx
     "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:e6cd39d4cea4051114c9bf1c61995efdb7b33a54c7b46b33b221f8371ae8c2b7",
                "sha256:7d1066a7c364bec8b8bb9a2621255009f66d8ef0ce0a437245ee7bab4b78e261",
                "sha256:79375ec14dc0353879d775e456501963e612315a637d02f88b59d95de0db5c85",
                "sha256:d67815551841241d1c88df385c85136439add7b880fb458c5a81d193b453bc01",
                "sha256:8e3d312836d7ccb6d8fddf82a085e00f28491d506e9380215b558087ac30c68c",
                "sha256:70d1d8c1333ed932da4c736ecad931d87e9f8410327711161cfc2e52577337ec",
                "sha256:5fa714fcbb2b89bddb223b4040ba515dc7d35753d2915a184d7c95c039a12dc0",
                "sha256:2a0f1e743a8f86084e2149492ad6e068b38cfb20357c12d0ee3621c2044e864c"
            ]
        },
  pre-config-nginx
      "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:e6cd39d4cea4051114c9bf1c61995efdb7b33a54c7b46b33b221f8371ae8c2b7",
                "sha256:7d1066a7c364bec8b8bb9a2621255009f66d8ef0ce0a437245ee7bab4b78e261",
                "sha256:79375ec14dc0353879d775e456501963e612315a637d02f88b59d95de0db5c85",
                "sha256:d67815551841241d1c88df385c85136439add7b880fb458c5a81d193b453bc01",
                "sha256:8e3d312836d7ccb6d8fddf82a085e00f28491d506e9380215b558087ac30c68c",
                "sha256:70d1d8c1333ed932da4c736ecad931d87e9f8410327711161cfc2e52577337ec",
                "sha256:0dee61369a012ca9741ba3cf02768807b4d096060053d80bbe402aabc3345f0f",
                "sha256:ded55460262c3d45953d79c07d179de972b3bfe51c32e94ead3441af1493874b"
            ]
        },

  Layering : 각 레이어는 이전 레이어 위에 쌓이며 , 여러 이미지 간에 공유될 수 있습니다.
  레이어 방식은 중복데이터를 최소화 하고, 빌드 속도를 높이며, 저장소를 효율적으로 사용할 수 있게 해줍니다

  Copy-on-Write(CoW) 전략 : 다음 레이어에서 이전 레이어의 특정 파일을 수정 할 때 
  해당 파일의 복사본을 만들어서 변경 사항을 적용 합니다. 
  이렇게 함으로써 원래 레이어는 수정되지 않고 그대로 유지됩니다 .
  
  Immutable Layers(불변 레이어) : 이미지의 각 레이어는 불편으로, 한번 생성되면 변경되지 않습니다.
  이렇게 함으로써 이미지의 일관성을 유지하고 , 여러 컨테이너에서 안전하게 공유할 수 있습니다 .
  
  Caching (캐싱) : 레이어를 캐시하여, 이미지 빌드된 레이어를 재사용 할 수 있습니다. 
  이는 이미지 빌드 시간을 크게줄여주며, 같은 레이어를 사용하는 여러 임지에서 효율적으로 작동합니다. 


이미지 커밋 
  커밋 : 현재 컨테이너의 상태를 이미지로 저장
    Container -> commit -> image 

  빌드 : Dockerfile을 통해 이미지를 저장 
    Dockerfile -> Build -> image
  
  
  이미지 커밋 방식
    1. Nginx 이미지를 컨테이너로 실행
      docker run nginx  
    2. 컨테이너의 내부 파일 변경 
    
    docker run -it --name officialNginx nginx bin/bash  
      echo hello-my-nginx>/usr/share/nginx/html/index.html  
        cat /usr/share/nginx/html/index.html 
         docker	commit	-m	"edited	index.html	by	devwiki"	-c	'CMD	["nginx",	"-g",	"daemon	off;"]'	officialNginx	(개인레지스트리명)/commitnginx
         docker	commit	-m	"edited	index.html	by	devwiki"	-c	'CMD	["nginx",	"-g",	"daemon	off;"]'	officialNginx	wldygus/commitnginx

         docker image ls wldygus/commitnginx # 생성된 이미지 확인 
         docker commit -m "edited index.html by devwiki" -c 'CMD ["nginx", "-g", "daemon off;"]' officialNginx wldygus/commitnginx

    여긴 잘안되서 넘어 갈게요 

이미지 빌드 
  IaC와 이미지 빌드
    : IaC(Infrasructure as Code): 인프라 상태를 코드로 관리 

  기존방식
    사람이 화면이나 CLI를 통해 관리 
    사내 데이터 센터 

  Dockerfile
    : 이미지를 만드는 단계를 기재한 명세서 

    사람 -> Dockerfile -> docker -> image
      : 원하는 이미지 상태를 코드로 작성 -> docker build 명령을 통해 이미지 생서 

      Dockerfile EX
        FROM Image:tag
        COPY sourcepath targetpath
        CMD ["command"]

      1. 임시 컨테이너 생성
      2. 변경사항 적용 후 커밋
          (새로운 레이어 생성)
      3. 임시 컨테이어너 삭제 


    docker build -t 이미지명 Dockerfile 경로
    : 도커 파일을 통해 이미지 빌드 
    FROM 이미지명
    : 베이스 이미지를 지정
    COPY 파일경로 복사할 경로
    : 파일을 레이어에 복사
    CMD ["명령어"]
    : 컨테이너 실행 시 명령어 지정 

    docker build -t 레지스트리계정명/buildnginx .
    docker build -t wldygus/buildnginx .
    : 토커파일을 사용해 buildnginx 이미지 빌드 

    docker run -d -p 80:80 --name build-nginx 레지스트리계정명/buildnginx 
    : 빌드로 제작한 이미지로 컨테이너 실행 

    docker run -d -p 80:80 --name build-nginx wldygus/buildnginx
    
    docker push wldygus/buildnginx
    : 실습에서 제작한 이미지 푸시 

  빌드 컨텍스트
  : Docker가 이미지를 빌드할 때 참조할 파일과 디렉토리의 경로를 의미합니다 
    # docker build 명령을 실행할때 docker는 지정된 빌드 컨텍스트를 기준으로 파일과 디렉토리를 도커 엔진으로 전송하고 , dockerfile과 관련된 작업을 수행합니다 .

      docker build -t buildcontext:ignorejunk .
      : # 파일을 찾을 수 없어 빌드가 안됨 

Node.js 애플리케이션 빌드 

  애플리케이션 빌드 
  : 소스코드를 실행 가능한 프로그램으로 빌드 # 애플리케이션, 프로그램 ,아티팩트 
  도커파일을 이미지로 빌드 

  FROM 이미지명
  : 베이스 이미지를 지정

  COPY 빌드컨텍스트경로 레이어경로
  : 빌드 컨텍스트의 파일을 레이어에 복사 #(cp) (새로운 레이어 추가)

  RUN 명령어 
  : 명령어 실행 #(새로운 레이어 추가)

  CMD ["명령어"]
  : 컨테이너 실행 시 명령어 지정 

  docker build -f 도커파일명 -t 이미지명 Dockerfile경로 
  
  docker build -f Dockerfile-basic -t buildapp:basic .

  WORKDIR 폴더명 
  : 작업 디렉토리를 지정(cd) # (새로운 레이어 추가 )

  USER 유저명 
  : 명령을 실행항 사용자 변경 (SU) # 새로운 레이어 추가

  EXPOSE 포트번호
  : 컨테이너가 사용할 포트를 명시 

  ARG 변수명 변수값 
  : 이미지 빌드 시점의 환경 변수 설정  # docker build --build-arg 변수명 = 변수값 으로 덮어쓰기 가능 

  ENV 변수명 변수값
  : 이미지 빌드 및 컨테이너 실행 시점의 환경 변수 설정 # docker run -e 변수명 = 변수값 으로 덮어쓰기 가능 

  ENTRYPOINT ["명령어"]
  : 고정된 명령어를 지정

  CMD ["명령어"]
   : 컨테이너 실행 시 실행 명령어 지정 

멀티 스테이지 빌드
  :Dockerfile에서 여러 단계를 거쳐 이미지를 빌드하는 기법으로 최종적으로 경향화된 이미지를
  생성하는데 사용됩니다. 



  