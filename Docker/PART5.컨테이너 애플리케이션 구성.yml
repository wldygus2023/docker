PART5 컨테이너 애플리케이션 구성

  클라우드 네이티브 애플리케이션 

    클라우드 
      : 스토리지 저장소 , 사용한 만큼만 비용을 지불한다 .
      # 1.MSA 트래픽 증가에 빠르게 대처하기 위해선 애플리케이션이 MSA 구조로 개발되어야 합니다. 



  LEafy 애플리케이션 구성
    : 식물 관리 웹 애플리케이션


    네트워크 정의 
      docker network create leafy-network 
      
      # leafy-postgres 컨테이너 생성 
      docker run -d --name leafy-postgres --network leafy-network devwikirepo/leafly-postgres:1.0.0

      #leafy-postgres 컨테이너 로그조회
      docker logs -f leafy-postgres 

      #leafy-postgres 컨테이너 생성 
      docker run -d -p 8080:8080 -e DB_URL=leafy-postgres --network leafy-network --name leafy devwikirepo/leafy-backend:1.0.0

      #백엔드 컨테이너 로그 조회
      docker logs -f leafy 
    
    프론트 정의
      #leafy-front 컨테이너 생성 
      docker run -d -p 80:80 --network leafy-network --name leafy-front devwikirepo/leafy-frontend:1.0.0

    아이디
      john123@gmail.com
      password123

  
  Leafy 데이터베이스 컨테이너 

    강의자료 
      git clone https://github.com/daintree-henry/leafy.git

  Leafy PostgreSQL 구조 #init.sql
    식물정보 #plants
    사용자-식물 연결정보 #user_plants
    사용자정보 #users
    사용자가 키우는 식물 다이어리 정보 # plant_logs

  이미지 레지스트리 실습
     docker cp 원본위치 복사위치
     : 컨테이너와 호스트 머신 간 파일 복사
     docker cp 컨테이너명: 원본위치 복사위치
     : 컨테이너 -> 호스트 머신으로 파일 복사
     docker cp 원본위치 컨테이너명 : 복사위치 
     : 호스트 머신 -> 컨테이너로 파일 복사 

      docker run -d --name postgres -e POSTGRES_PASSWORD=password postgres:13
      : 기본 postgres:13 이미지를 사용해 컨테이너 실행 
      
      docker exec -it postgres bin/bash
      : postgres 컨테이너로 shell 접속 

      cat /var/lib/postgresql/data/postgresql.conf
      : gostgres:13 이미지의 기본 설정 파일 확인하기 

      ls -al /docker-entrypoint-initdb.d/
      : 이 폴더에 sql문이 있을 경우 컨테이너 실행 시 자동으로 sql을 실행 

      docker cp ./config/postgresql.conf postgres:etc/postgresql/custom.conf
      : 호스트 머신의 ./config/postgresql.conf 파일을 postgres 컨테이너의 / etc/postgresql/custom.conf 파일로 복사 

      cat /etc/postgresql/custom.conf
      : 컨테이너 내부로 파일이 잘 복사되었는지 확인 

      docker cp ./init/init.sql postgres:docker-entrypoint-initdb.d
      : 호스트 머신의 ./init/init.sql 파일을 postgres 컨테이너의 /docker-entrypoint-initdv.d/init.sql 파일로 복사 

      ls /docker-entrypoint-initdb.d/
      : 컨테이너 내부로 파일이 잘 복사되었는지 확인 
      
      psql -U postgres -c "\d"
      : 현재 DB의 테이블 정보 확인 

      psql -U postgres -f/docker-entrypoint-initdb.d/init.sql
      : /docker-entrypoint-initdb.d/init.sql 파일 실행 

      docker rm -f postgres

    빌드로 실행
      docker network ls 
      : 네트워크 리스트 확인 
      
      docker network create leafy-network
      : 새로운 네트워크 생성(leafy-network가 없을 경우에만)

      docker build -t 레지스트리계정명/leafy-postgres:1.0.0 .
      : 도커파일을 사용해 postgres 이미지 빌드 

      docker run -d --name leafy-postgres --network leafy-network 레지스트리명/leafy-postgres:1.0.0
      :빌드한 이미지를 사용해 leafy-postgres 컨테이너 실행 

      docker logs leafy-postgres 
      : leafy-postgres 컨테이너의 로그 확인 

      docker exec -it leafy-postgres su postgres bash -c "psql --username=myuser --dbname=mydb"
      :leafy-postgres 컨테이너 내에서 명령에 실행 후 결과 출력

      SELECT * FROM users;  plants 
      : users 테이블의 데이터 확인 

      docker image history 레지스트리계정명/leafy-postgres:1.0.0
      : leafy-postgres 이미지의 레이어 확인 
  
  leafy 백엔드 컨테이너 
      식물 관리 웹 애플리케이션 
        백엔드 spring boot Application 구성
            5.애플리케이션 실행
                java -jar leafy.jar 
                                        4.의존성 라이브러리 설치 및 빌드     - 
                                            gradle clean build             -
        실행 스테이지                    3.소스코드 다운로드                 -   묶어서 빌드 
                                            git clone...                   -   빌드 스테이지
                                        2.빌드 도구 설치                    -
                                            gradle                         -
            1.os구성 및 java Runtime 설치
                java runtime
                 os 

      Cmmit 방식
        docker run -it --name gradle gradle:7.6.1-jdk17 bash
        : gradle 컨테이너 실행 및 shell 접속
        
        mkdir /app && cd /app
        : /app 폴더 생성 및 이동(WORKDIR /app과 같은 효과)

        docker cp . gradle:app
        : gradle 컨테이너의 /app 경로 .경로복사 (꼭 leafy-backend 경로에서 실행해야 합니다.)

        gradle clean build --no-daemon
        : gradle 빌드 실행 

        ls build/libs
        : gradle 빌드를 실행한 결과 확인 

        java -jar /app/build/libs/Leafy-0.0.1-SNAPSHOT.jar
        : gradle 컨테이너 내부에서 빌드로 만들어진 jar 파일 실행 

        docker rm -f gradle 
        : 실습 컨테이너 종료 

      build 버전
        docker build -t 레지스트리계정명/leafy-backend:1.0.0 .
        : 도커파일을 사용해 leafy-backend 이미지 빌드 
        
        docker push 레지스트리계정명/leafy-backend:1.0.0
        : 이미지 push

        docker run -d -p 8080:8080 -e DB_URL=leafy-postgres --name leafy --network leafy-network 레지스트리계정명/leafy-backend:1.0.0
        : 도커파일을 사용해 leafy-backend 이미지 빌드 

        docker logs leafy
        : leafy 컨테이너의 로그 확인 

        curl http://localhost:8080/api/v1/users 
        :leafy 컨테이너의 로그 확인 
  
    leafy 프론트엔드 컨테이너 

      1.프레임워크를 사용해 프론트앤드 프로젝트 개발
      2.빌드를 통해 html.javScript,css 파일을 dist 경로에 생성
      3.dist 경로를 nginx 웹서버의 /usr/share/nginx/html경로로 복사
      4.브라우저를 통해 웹서버로 접속 웹페이지 응답

      6.웹서버 실행
          nginx -g daemon off;
      5. 빌드 결과 폴더를 /usr/share/nginx/html 폴더로 복사
          cp ./dist /usr/share/nginx/html
      4. 의존성 라이브러리 설치 및 빌드
          npm ci & npm run build
      3.소스코드 다운로드
          gir clone ..
      2. 빌드 도구 설치
          node.js
      1. os구성 및 Nginx 웹서버 설치
          Nginx
          os
        
      2~5까지는 빌드 스테이지
        RUN npm run build
        RUN npm ci
        COPY . .
        FROM node:14
        AS build 
              
      1,6 실행 스테이지 
        CMD["nginx","-g","daemon off;"]
        FROM nginx:1.21.4-alpine

  프론트엔드 구성
    페이지명          URL             페이지설명
    로그인 페이지     /login          
    메인 페이지       /               나의 식물 리스트와 최근 다이어리 5건 조회
    전체 식물 조회    /plants         전체 식물 리스트 조회
    식물 추가         /plants/add     새로운 식물 추가
    나의 일기 조회    /plantlogs       로그인한 사용자의 일기 조회
    설정 변경         /setting         
    사용자 정보 변경   /edituser       로그인한 사용자의 설정 변경            
    
  Docker 실행
    docker run -it --name node node:14 bin/bash
    : node.js 임시 컨테이너 실행 

    mkdir /app && cd /app
    : /app 폴더 생성 및 이동 (workdir 지시어와 동일한 효과)

    docker cp . node:app
    : leafy-frontend 경로의 모든 파일들 node 컨테이너의 app으로 복사 

    npm ci 
    : 의존 라이브러리 다운로드 

    npm run build
    : 프론트앤드 애플리케이션 빌드 
     
    docker cp node:app/dist .
    : node 컨테이너에서 빌드한 결과물인 app/dist 폴더를 호스트 머신으로 복사

    docker rm -f node 
    : node 컨테이너 삭제 

    docker run -d -p 80:80 --name nginx nginx 
    :nginx 컨테이너 실행

    docker cp ./dist/. nginx:usr/share/nginx/html
    : node 컨테이너에서 빌드한 결과물인 dist 폴더를 nginx 컨테이너로 복사 

    docker logs nginx
                                            
    docker rm -f nginx

  Docker 빌드

    docker build -t 레지스트리계정명/leafy-frontend:1.0.0 .
    : leafy-frontend 이미지 빌드 

    docker push 레지스트리계정명/leafy-frontend:1.0.0
    : leadfy-frontend 이미지 푸시 

    docker run -d -p 80:80 --name leafy-frontend --network leafy-network 레지스트계정명/leafy-frontend:1.0.0
    : leafy-frontend 컨테이너 실행 

    john123@qmail.com
    password123

    전체 빌드 상황
      1./ 접속, router.js 파일 내용에 따라 HomePage.vue 페이지 응답
      2. HomePage.vue 파일이 브라우저에 전달, 파일 내 api.get() 발견 후 백엔드 애플리케이션에 데이터 요청
      3. 총 2개에 API요청 수행됨 , 
      - 최근 식물 다이어리 5건 /api/v1/lplant-logs/recent/user/${userId}
      - 사용자가 키우는 식물리스트  /api/v1/user-plants/user/${userId}
      4. 백엔드의 비즈니스 로직 처리 시 데이터베이스 접근, 
      식물 다이어리 5건, 사용자의 식물리스트 응답
      5. 백엔드 애플리케이션에서 제공받는 데이터를 포함한 웹 페이지 화면 표시 

    실습 컨테이너 삭제
    
    docker rm -f leafy-frontend leafy leafy-postgres 
    :    실습 컨테이너 삭제